#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/9c04a022-f83f-44f8-9152-4c043fc337e9

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  float h;
  float t;
  int spt;
  bool alarm;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

//IoT Arduino cloud library
#include "thingProperties.h"
//Arduino Uno R4 on board led matrix library
#include "Arduino_LED_Matrix.h"
// DHT sensor libraries
#include <DHT.h>
#include <DHT_U.h>
// LiquidCrystal I2C library
#include <LiquidCrystal_I2C.h>

//Set DHT sensor parameters
#define DHTPIN 2
#define DHTTYPE DHT11

//Assign DHT Parameters
DHT dht(DHTPIN, DHTTYPE);

//Set LCD parameters
LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display

//Set IFTT server parameter to call Applet Alarm to send alarm email
int HTTP_PORT = 80;
String HTTP_METHOD = "GET";
char HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME = "/trigger/Alarm/json/with/key/kfBcdZ30qTqp5pNodLj0OK4zTCaAGoZuolHY8ZSDpXu";

//Assign matrix variable to drive on board Arduino UNO R4 matrix
ArduinoLEDMatrix matrix;
//Assign WiFi client method variable to be called later
WiFiClient client;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  
  //Initialize on board Arduino UNO R4 matrix
  Serial.begin(115200);
  matrix.begin();

  //Initialize DHT sensor
  dht.begin();
  //Initialize LCD screen
  lcd.init();
  lcd.backlight();
  lcd.clear();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //Set Set Point temperature a starting value and alarm to false value
  spt = 30;
  alarm = false;
  
}

//Happy face matrix reppresetnation on boart Arduino UNO R4
const uint32_t happy[] = {
    0x19819,
    0x80000001,
    0x81f8000
};
//Heart matrix reppresetnation on boart Arduino UNO R4
const uint32_t heart[] = {
    0x3184a444,
    0x44042081,
    0x100a0040
};

void loop() 
{
  ArduinoCloud.update();
  // Your code here

  //load happy face on board Arduino UNO R4 matrix
  matrix.loadFrame(happy);
  delay(500);
  //load heart on board Arduino UNO R4 matrix
  matrix.loadFrame(heart);
  delay(500);

  delay(2000);

  //Set temperature and Humidity local variables from istances
  t = dht.readTemperature();
  h = dht.readHumidity();

  //Below code can be loaded for debug purposes
  //Sending the collected data to the serial monitor
  //Serial.print("Humidity: ");
  //Serial.print(h);
  //Serial.print("% Temperature: ");
  //Serial.print(t);
  //Serial.println(" ° C");

  //Below code can be loaded for debug purpose, messages to Cloud Message window Dashboard
  //message = "Humidity: " + String (h) + "%";
  //message = "Temperature: " + String (t) + "C";


  //Sending the collected data to the lcd monitor
  int TEMP = t;
  int HUMY = h;

  lcd.setCursor(0, 0);
  lcd.print("T: ");
  lcd.setCursor(3, 0);
  lcd.print(TEMP);
  lcd.setCursor(6, 0);
  lcd.print("C");
  lcd.setCursor(8, 0);
  lcd.print("H: ");
  lcd.setCursor(11, 0);
  lcd.print(HUMY);
  lcd.setCursor(14, 0);
  lcd.print("%");
  lcd.setCursor(0, 1);
  lcd.print("TempSP: ");
  lcd.setCursor(8, 1);
  lcd.print(spt);
  lcd.setCursor(11, 1);
  lcd.print("C");

  //Coding function to verify if temp is higher of the set point, in case alarm is triggered
  if (TEMP >= spt)
  {
    lcd.setCursor(13, 1);
    lcd.print("a");
    
    if (alarm == false) 
    {
      if (client.connect(HOST_NAME, HTTP_PORT)) 
      {
        //Below code can be loaded for debug purposes
        //Serial.println("Connected to server");
        //Below code can be loaded for debug purpose, messages to Cloud Message window Dashboard
        message = "Connected to server"; 
        //Set internet connection with IFTTT site and webhook call to trigger alarm email message
        client.println(HTTP_METHOD + " " + PATH_NAME + " HTTP/1.1");
        client.println("Host: " + String(HOST_NAME));
        client.println("Connection: close");
        client.println();
        message = "Alert message sent";
        alarm = true;
      } else 
        {
          //Below code can be loaded for debug purposes  
          //Serial.println("Connection failed");
          //Below code can be loaded for debug purpose, messages to Cloud Message window Dashboard
          message = "Connection failed";
        }
    } else 
      {
        message = "else su alarm";
      }
                   
  } else 
    {
      lcd.setCursor(13, 1);
      lcd.print(" ");
      alarm = false;
      //Below code can be loaded for debug purposes  
      //Serial.println("No Alarm");
      //Below code can be loaded for debug purpose, messages to Cloud Message window Dashboard
      message = "No Alarm";
    }
}

/*
  Since Spt is READ_WRITE variable, onSptChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSptChange()  {
  // Add your code here to act upon Spt change
}

/*
  Since Alarm is READ_WRITE variable, onAlarmChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAlarmChange()  {
  // Add your code here to act upon Alarm change
}

/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageChange()  {
  // Add your code here to act upon Message change
}